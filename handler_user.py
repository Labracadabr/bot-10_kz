import json
from aiogram import Router, Bot, F
from aiogram.filters import Command, StateFilter, or_f
from bot_logic import log, Access, FSM # dwnld_photo_or_doc
from config import Config, load_config
from keyboards import keyboard_admin, keyboard_user, keyboard_ok, keyboard_privacy
from settings import admins, baza
from lexic import lex
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import CallbackQuery, Message


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å—è–∫–∏—Ö –±–æ—Ç—Å–∫–∏—Ö —à—Ç—É–∫
router: Router = Router()
config: Config = load_config()
TKN: str = config.tg_bot.token
storage: MemoryStorage = MemoryStorage()


# –∫–æ–º–∞–Ω–¥–∞ /help
@router.message(Command(commands=['help']))
async def process_help_command(message: Message):
    log('logs.json', message.from_user.id, '/help')
    await message.answer(lex['help'])


# # —á–µ–∫–Ω—É—Ç—å –Ω–µ –≤ –±–∞–Ω–µ –ª–∏ —é–∑–µ—Ä
# @router.message(Access(book['ban']))
# async def no_access(message: Message):
#     log('logs.json', message.from_user.id, 'ban')
#     await message.answer(lex['ban'])


# –∫–æ–º–∞–Ω–¥–∞ /status - –ø–æ–∫–∞–∑–∞—Ç—å —é–∑–µ—Ä—É —Å—Ç–∞—Ç—É—Å –µ–≥–æ –∑–∞–¥–∞–Ω–∏–π
@router.message(Command(commands=['status']))
async def process_status_command(msg: Message, bot: Bot):
    user = str(msg.from_user.id)
    log('logs.json', user, '/status')
    with open(baza, 'r') as f:
        data = json.load(f)

    async def get_status(user_id):
        non = rev = rej = acc = 0

        try:
            info = data[user_id]
            for task in info:
                print(task)
                if info[task][0] == 'status':
                    non += 1
                if info[task][0] == 'review':
                    rev += 1
                if info[task][0] == 'reject':
                    rej += 1
                if info[task][0] == 'accept':
                    acc += 1
        except KeyError:
            non = '65'
        return f'‚úÖ –ü—Ä–∏–Ω—è—Ç–æ - {acc}\nüîÅ –ù–∞–¥–æ –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å - {rej}\n‚è≥ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ - {rev}\nüí™ –û—Å—Ç–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å - {non}'

    if user in admins:
        answer_text = ''
        for usr in data:
            usr_stat = await get_status(usr)
            if not usr_stat.endswith('65'):
                answer_text += f'\nid{usr}\n{usr_stat}\n'
        if answer_text:
            await msg.answer('–°—Ç–∞—Ç—É—Å—ã –≤—Å–µ—Ö —é–∑–µ—Ä–æ–≤, –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª:\n'+answer_text)
        else:
            await msg.answer('–ï—â—ë –Ω–∏–∫—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª')

    if user not in admins:
        stat = await get_status(user)
        await msg.answer(f'–í–∞—à–∏ –∑–∞–¥–∞–Ω–∏—è:\n\n{stat}')


# –∫–æ–º–∞–Ω–¥–∞ /start
@router.message(Command(commands=['start']))
async def process_start_command(message: Message, bot: Bot, state: FSMContext):
    user = message.from_user
    msg_time = message.date.strftime("%d/%m/%Y %H:%M")
    # print(message.json(indent=4, exclude_none=True))
    print(f'Bot started by id{user.id} {user.full_name} @{user.username}')

    # –ª–æ–≥–∏
    log('logs.json', 'logs',
        f'{msg_time}, {user.full_name}, @{user.username}, id {user.id}, {user.language_code}')
    log('logs.json', user.id, '/start')

    # –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤—ã–¥–∞—á–∞ –ø–æ–ª–∏—Ç–∏–∫–∏
    await message.answer(text=lex['start'], reply_markup=keyboard_privacy, parse_mode='HTML')
    await message.answer(text='–° –ø–æ–ª–∏—Ç–∏–∫–æ–π –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω –∏ —Å–æ–≥–ª–∞—Å–µ–Ω', reply_markup=keyboard_ok)
    # –±–æ—Ç –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–≥–ª–∞—Å–∏–µ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π
    await state.set_state(FSM.policy)

    # —Å–æ–æ–±—â–∏—Ç—å –∞–¥–º–∏–Ω—É, –∫—Ç–æ —Å—Ç–∞—Ä—Ç–∞–Ω—É–ª –±–æ—Ç–∞
    if str(user.id) not in admins:
        for i in admins:
            await bot.send_message(text=f'Bot started by id{user.id} {user.full_name} @{user.username}',
                                   chat_id=i, disable_notification=True)

    # —Å–æ–∑–¥–∞—Ç—å —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å —é–∑–µ—Ä–∞, –µ—Å–ª–∏ –µ—ë –µ—â–µ –Ω–µ—Ç
    with open(baza, 'r') as f:
        data = json.load(f)
    if str(user.id) not in data:
        data.setdefault(str(user.id), lex['user_account'])
        with open(baza, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)


# –∫–æ–º–∞–Ω–¥–∞ /next - –¥–∞—Ç—å —é–∑–µ—Ä—É —Å–ª–µ–¥ –∑–∞–¥–∞–Ω–∏–µ
@router.message(Command(commands=['next']))
async def next_cmnd(message: Message, bot: Bot, state: FSMContext):
    user = str(message.from_user.id)
    log('logs.json', user, '/next')

    # —Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞–Ω–∏–π —é–∑–µ—Ä–∞
    with open(baza, 'r') as f:
        data = json.load(f)
    tasks = data[user]

    # –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ, —Ç.–µ. –±–µ–∑ —Å—Ç–∞—Ç—É—Å–∞ accept –∏–ª–∏ review, –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —é–∑–µ—Ä—É
    for i in tasks:
        if tasks[i][0] in ('status', 'reject'):
            await bot.send_message(chat_id=user, text=lex['tasks'][i], parse_mode='HTML')
            break

    # –±–æ—Ç –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–ª–µ–¥ —Ñ–∞–π–ª–∞
    await state.set_state(FSM.ready_for_next)


# —é–∑–µ—Ä —Å–æ–≥–ª–∞—Å–µ–Ω —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π ‚úÖ
@router.callback_query(lambda x: x.data == "ok_pressed", StateFilter(FSM.policy))
async def privacy_ok(callback: CallbackQuery, bot: Bot, state: FSMContext):
    worker = callback.from_user
    log('logs.json', worker.id, 'privacy_ok')

    # –≤—ã–¥–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ –ø—Ä–∏–º–µ—Ä—ã
    msg_to_pin = await bot.send_message(text=lex['instruct1'], chat_id=worker.id, parse_mode='HTML')
    await bot.send_message(text=f"{lex['instruct2']}\n\n{lex['full_hd']}", chat_id=worker.id, parse_mode='HTML',
                           disable_web_page_preview=True, reply_markup=keyboard_user)
    await bot.pin_chat_message(message_id=msg_to_pin.message_id, chat_id=worker.id, disable_notification=True)

#
# # –µ—Å–ª–∏ —é–∑–µ—Ä –ø–∏—à–µ—Ç —á—Ç–æ-—Ç–æ –Ω–µ –Ω–∞–∂–∞–≤ ‚úÖ
# @router.message(StateFilter(FSM.policy))
# async def privacy_missing(msg: Message):
#     log('logs.json', msg.from_user.id, 'privacy_missing')
#     await msg.answer(text=lex['privacy_missing'])


# —é–∑–µ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª –∞–ª—å–±–æ–º: –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è
@router.message(lambda msg: msg.media_group_id)
async def alb(msg: Message):
    worker = msg.from_user
    log('logs.json', worker.id, 'album')
    await msg.reply(lex['album'])


# —é–∑–µ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–∂–∞—Ç—ã–π —Ñ–∞–π–ª: –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è
@router.message(F.content_type.in_({'photo', 'video'}))
async def compressed_pic(msg: Message):
    log('logs.json', msg.from_user.id, 'compressed_file')
    await msg.reply(lex['full_hd'], parse_mode='HTML')


# —é–∑–µ—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–æ—Ä–º —Ñ–∞–π–ª
@router.message(F.content_type.in_({'document'}), StateFilter(FSM.ready_for_next))
async def file_ok(msg: Message, bot: Bot, state: FSMContext):
    user = str(msg.from_user.id)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
    file_id = msg.document.file_id

    with open(baza, 'r') as f:
        data = json.load(f)

    # –≤—ã—á–∏—Å–ª—è–µ–º, –∫–∞–∫–æ–µ –±—ã–ª–æ –ø—Ä–∏—Å–ª–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–µ
    sent_file = ''
    tasks = data[user]
    for i in tasks:
        print(tasks[i])
        if tasks[i][0] in ('status', 'reject'):
            sent_file = i
            log('logs.json', user, f'SENT_{sent_file}')
            break

    # –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    data[user][sent_file] = ('review', file_id)
    tasks = data[user]
    with open(baza, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

    # –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    more_tasks = False
    for i in tasks:
        if tasks[i][0] in ('status', 'reject'):
            more_tasks = True
            break

    # –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –µ—â–µ –∑–∞–¥–∞–Ω–∏—è
    if more_tasks:
        # –ë–æ—Ç –æ–∂–∏–¥–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è /next
        await state.set_state(FSM.done_a_task)
        # await msg.reply(f'–ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {sent_file[-2:]}.\n–ù–∞–∂–º–∏—Ç–µ /next –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è', reply_markup=keyboard_user)
        await msg.reply(text=lex['receive'].format(sent_file[-2:]), reply_markup=keyboard_user)

    # –µ—Å–ª–∏ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª
    if not more_tasks:
        # —É–≤–µ–¥–æ–º–∏—Ç—å —é–∑–µ—Ä–∞ —á—Ç–æ–± –æ–∂–∏–¥–∞–ª –ø—Ä–æ–≤–µ—Ä–∫—É
        await msg.reply(lex['all_sent'])
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª–´ –∞–¥–º–∏–Ω—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
        for task in tasks:
            print('adm', task)
            if tasks[task][0] == 'review':
                # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Å—Ç–∞—Ç—É—Å == review
                file_id = tasks[task][1]
                text = lex['tasks'][task].split('\n')[0]

                await bot.send_document(chat_id=admins[0], document=file_id, caption=text, parse_mode='HTML')

        # —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (‚úÖ–ø—Ä–∏–Ω—è—Ç—å –∏–ª–∏ –Ω–µ—Ç‚ùå)
        await bot.send_message(chat_id=admins[0], text=f'–ü—Ä–∏–Ω—è—Ç—å –í–°–ï —Ñ–∞–π–ª—ã –æ—Ç id{user}?'
                                                       f'\n{msg.from_user.full_name} @{msg.from_user.username}', reply_markup=keyboard_admin)

        log('logs.json', user, 'SENT_ALL_FILES')


